// Code generated by counterfeiter. DO NOT EDIT.
package pluginfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/command/plugin"
)

type FakeAddPluginRepoActor struct {
	AddPluginRepositoryStub        func(repoName string, repoURL string) error
	addPluginRepositoryMutex       sync.RWMutex
	addPluginRepositoryArgsForCall []struct {
		repoName string
		repoURL  string
	}
	addPluginRepositoryReturns struct {
		result1 error
	}
	addPluginRepositoryReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAddPluginRepoActor) AddPluginRepository(repoName string, repoURL string) error {
	fake.addPluginRepositoryMutex.Lock()
	ret, specificReturn := fake.addPluginRepositoryReturnsOnCall[len(fake.addPluginRepositoryArgsForCall)]
	fake.addPluginRepositoryArgsForCall = append(fake.addPluginRepositoryArgsForCall, struct {
		repoName string
		repoURL  string
	}{repoName, repoURL})
	fake.recordInvocation("AddPluginRepository", []interface{}{repoName, repoURL})
	fake.addPluginRepositoryMutex.Unlock()
	if fake.AddPluginRepositoryStub != nil {
		return fake.AddPluginRepositoryStub(repoName, repoURL)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addPluginRepositoryReturns.result1
}

func (fake *FakeAddPluginRepoActor) AddPluginRepositoryCallCount() int {
	fake.addPluginRepositoryMutex.RLock()
	defer fake.addPluginRepositoryMutex.RUnlock()
	return len(fake.addPluginRepositoryArgsForCall)
}

func (fake *FakeAddPluginRepoActor) AddPluginRepositoryArgsForCall(i int) (string, string) {
	fake.addPluginRepositoryMutex.RLock()
	defer fake.addPluginRepositoryMutex.RUnlock()
	return fake.addPluginRepositoryArgsForCall[i].repoName, fake.addPluginRepositoryArgsForCall[i].repoURL
}

func (fake *FakeAddPluginRepoActor) AddPluginRepositoryReturns(result1 error) {
	fake.AddPluginRepositoryStub = nil
	fake.addPluginRepositoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAddPluginRepoActor) AddPluginRepositoryReturnsOnCall(i int, result1 error) {
	fake.AddPluginRepositoryStub = nil
	if fake.addPluginRepositoryReturnsOnCall == nil {
		fake.addPluginRepositoryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addPluginRepositoryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAddPluginRepoActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addPluginRepositoryMutex.RLock()
	defer fake.addPluginRepositoryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAddPluginRepoActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.AddPluginRepoActor = new(FakeAddPluginRepoActor)
