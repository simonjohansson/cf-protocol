// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeBindServiceActor struct {
	BindServiceBySpaceStub        func(appName string, ServiceInstanceName string, spaceGUID string, parameters map[string]interface{}) (v2action.Warnings, error)
	bindServiceBySpaceMutex       sync.RWMutex
	bindServiceBySpaceArgsForCall []struct {
		appName             string
		ServiceInstanceName string
		spaceGUID           string
		parameters          map[string]interface{}
	}
	bindServiceBySpaceReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	bindServiceBySpaceReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBindServiceActor) BindServiceBySpace(appName string, ServiceInstanceName string, spaceGUID string, parameters map[string]interface{}) (v2action.Warnings, error) {
	fake.bindServiceBySpaceMutex.Lock()
	ret, specificReturn := fake.bindServiceBySpaceReturnsOnCall[len(fake.bindServiceBySpaceArgsForCall)]
	fake.bindServiceBySpaceArgsForCall = append(fake.bindServiceBySpaceArgsForCall, struct {
		appName             string
		ServiceInstanceName string
		spaceGUID           string
		parameters          map[string]interface{}
	}{appName, ServiceInstanceName, spaceGUID, parameters})
	fake.recordInvocation("BindServiceBySpace", []interface{}{appName, ServiceInstanceName, spaceGUID, parameters})
	fake.bindServiceBySpaceMutex.Unlock()
	if fake.BindServiceBySpaceStub != nil {
		return fake.BindServiceBySpaceStub(appName, ServiceInstanceName, spaceGUID, parameters)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.bindServiceBySpaceReturns.result1, fake.bindServiceBySpaceReturns.result2
}

func (fake *FakeBindServiceActor) BindServiceBySpaceCallCount() int {
	fake.bindServiceBySpaceMutex.RLock()
	defer fake.bindServiceBySpaceMutex.RUnlock()
	return len(fake.bindServiceBySpaceArgsForCall)
}

func (fake *FakeBindServiceActor) BindServiceBySpaceArgsForCall(i int) (string, string, string, map[string]interface{}) {
	fake.bindServiceBySpaceMutex.RLock()
	defer fake.bindServiceBySpaceMutex.RUnlock()
	return fake.bindServiceBySpaceArgsForCall[i].appName, fake.bindServiceBySpaceArgsForCall[i].ServiceInstanceName, fake.bindServiceBySpaceArgsForCall[i].spaceGUID, fake.bindServiceBySpaceArgsForCall[i].parameters
}

func (fake *FakeBindServiceActor) BindServiceBySpaceReturns(result1 v2action.Warnings, result2 error) {
	fake.BindServiceBySpaceStub = nil
	fake.bindServiceBySpaceReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeBindServiceActor) BindServiceBySpaceReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.BindServiceBySpaceStub = nil
	if fake.bindServiceBySpaceReturnsOnCall == nil {
		fake.bindServiceBySpaceReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.bindServiceBySpaceReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeBindServiceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindServiceBySpaceMutex.RLock()
	defer fake.bindServiceBySpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBindServiceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.BindServiceActor = new(FakeBindServiceActor)
