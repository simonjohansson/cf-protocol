// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeUnbindServiceActor struct {
	UnbindServiceBySpaceStub        func(appName string, serviceInstanceName string, spaceGUID string) (v2action.Warnings, error)
	unbindServiceBySpaceMutex       sync.RWMutex
	unbindServiceBySpaceArgsForCall []struct {
		appName             string
		serviceInstanceName string
		spaceGUID           string
	}
	unbindServiceBySpaceReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	unbindServiceBySpaceReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUnbindServiceActor) UnbindServiceBySpace(appName string, serviceInstanceName string, spaceGUID string) (v2action.Warnings, error) {
	fake.unbindServiceBySpaceMutex.Lock()
	ret, specificReturn := fake.unbindServiceBySpaceReturnsOnCall[len(fake.unbindServiceBySpaceArgsForCall)]
	fake.unbindServiceBySpaceArgsForCall = append(fake.unbindServiceBySpaceArgsForCall, struct {
		appName             string
		serviceInstanceName string
		spaceGUID           string
	}{appName, serviceInstanceName, spaceGUID})
	fake.recordInvocation("UnbindServiceBySpace", []interface{}{appName, serviceInstanceName, spaceGUID})
	fake.unbindServiceBySpaceMutex.Unlock()
	if fake.UnbindServiceBySpaceStub != nil {
		return fake.UnbindServiceBySpaceStub(appName, serviceInstanceName, spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.unbindServiceBySpaceReturns.result1, fake.unbindServiceBySpaceReturns.result2
}

func (fake *FakeUnbindServiceActor) UnbindServiceBySpaceCallCount() int {
	fake.unbindServiceBySpaceMutex.RLock()
	defer fake.unbindServiceBySpaceMutex.RUnlock()
	return len(fake.unbindServiceBySpaceArgsForCall)
}

func (fake *FakeUnbindServiceActor) UnbindServiceBySpaceArgsForCall(i int) (string, string, string) {
	fake.unbindServiceBySpaceMutex.RLock()
	defer fake.unbindServiceBySpaceMutex.RUnlock()
	return fake.unbindServiceBySpaceArgsForCall[i].appName, fake.unbindServiceBySpaceArgsForCall[i].serviceInstanceName, fake.unbindServiceBySpaceArgsForCall[i].spaceGUID
}

func (fake *FakeUnbindServiceActor) UnbindServiceBySpaceReturns(result1 v2action.Warnings, result2 error) {
	fake.UnbindServiceBySpaceStub = nil
	fake.unbindServiceBySpaceReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeUnbindServiceActor) UnbindServiceBySpaceReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.UnbindServiceBySpaceStub = nil
	if fake.unbindServiceBySpaceReturnsOnCall == nil {
		fake.unbindServiceBySpaceReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.unbindServiceBySpaceReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeUnbindServiceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unbindServiceBySpaceMutex.RLock()
	defer fake.unbindServiceBySpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUnbindServiceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.UnbindServiceActor = new(FakeUnbindServiceActor)
