// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeCreateRouteActor struct {
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct{}
	cloudControllerAPIVersionReturns     struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	CreateRouteWithExistenceCheckStub        func(orgGUID string, spaceName string, route v2action.Route, generatePort bool) (v2action.Route, v2action.Warnings, error)
	createRouteWithExistenceCheckMutex       sync.RWMutex
	createRouteWithExistenceCheckArgsForCall []struct {
		orgGUID      string
		spaceName    string
		route        v2action.Route
		generatePort bool
	}
	createRouteWithExistenceCheckReturns struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}
	createRouteWithExistenceCheckReturnsOnCall map[int]struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreateRouteActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct{}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cloudControllerAPIVersionReturns.result1
}

func (fake *FakeCreateRouteActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeCreateRouteActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCreateRouteActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeCreateRouteActor) CreateRouteWithExistenceCheck(orgGUID string, spaceName string, route v2action.Route, generatePort bool) (v2action.Route, v2action.Warnings, error) {
	fake.createRouteWithExistenceCheckMutex.Lock()
	ret, specificReturn := fake.createRouteWithExistenceCheckReturnsOnCall[len(fake.createRouteWithExistenceCheckArgsForCall)]
	fake.createRouteWithExistenceCheckArgsForCall = append(fake.createRouteWithExistenceCheckArgsForCall, struct {
		orgGUID      string
		spaceName    string
		route        v2action.Route
		generatePort bool
	}{orgGUID, spaceName, route, generatePort})
	fake.recordInvocation("CreateRouteWithExistenceCheck", []interface{}{orgGUID, spaceName, route, generatePort})
	fake.createRouteWithExistenceCheckMutex.Unlock()
	if fake.CreateRouteWithExistenceCheckStub != nil {
		return fake.CreateRouteWithExistenceCheckStub(orgGUID, spaceName, route, generatePort)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.createRouteWithExistenceCheckReturns.result1, fake.createRouteWithExistenceCheckReturns.result2, fake.createRouteWithExistenceCheckReturns.result3
}

func (fake *FakeCreateRouteActor) CreateRouteWithExistenceCheckCallCount() int {
	fake.createRouteWithExistenceCheckMutex.RLock()
	defer fake.createRouteWithExistenceCheckMutex.RUnlock()
	return len(fake.createRouteWithExistenceCheckArgsForCall)
}

func (fake *FakeCreateRouteActor) CreateRouteWithExistenceCheckArgsForCall(i int) (string, string, v2action.Route, bool) {
	fake.createRouteWithExistenceCheckMutex.RLock()
	defer fake.createRouteWithExistenceCheckMutex.RUnlock()
	return fake.createRouteWithExistenceCheckArgsForCall[i].orgGUID, fake.createRouteWithExistenceCheckArgsForCall[i].spaceName, fake.createRouteWithExistenceCheckArgsForCall[i].route, fake.createRouteWithExistenceCheckArgsForCall[i].generatePort
}

func (fake *FakeCreateRouteActor) CreateRouteWithExistenceCheckReturns(result1 v2action.Route, result2 v2action.Warnings, result3 error) {
	fake.CreateRouteWithExistenceCheckStub = nil
	fake.createRouteWithExistenceCheckReturns = struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateRouteActor) CreateRouteWithExistenceCheckReturnsOnCall(i int, result1 v2action.Route, result2 v2action.Warnings, result3 error) {
	fake.CreateRouteWithExistenceCheckStub = nil
	if fake.createRouteWithExistenceCheckReturnsOnCall == nil {
		fake.createRouteWithExistenceCheckReturnsOnCall = make(map[int]struct {
			result1 v2action.Route
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.createRouteWithExistenceCheckReturnsOnCall[i] = struct {
		result1 v2action.Route
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateRouteActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.createRouteWithExistenceCheckMutex.RLock()
	defer fake.createRouteWithExistenceCheckMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCreateRouteActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.CreateRouteActor = new(FakeCreateRouteActor)
