// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeCreateUserActor struct {
	CreateUserStub        func(username string, password string, origin string) (v2action.User, v2action.Warnings, error)
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct {
		username string
		password string
		origin   string
	}
	createUserReturns struct {
		result1 v2action.User
		result2 v2action.Warnings
		result3 error
	}
	createUserReturnsOnCall map[int]struct {
		result1 v2action.User
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreateUserActor) CreateUser(username string, password string, origin string) (v2action.User, v2action.Warnings, error) {
	fake.createUserMutex.Lock()
	ret, specificReturn := fake.createUserReturnsOnCall[len(fake.createUserArgsForCall)]
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct {
		username string
		password string
		origin   string
	}{username, password, origin})
	fake.recordInvocation("CreateUser", []interface{}{username, password, origin})
	fake.createUserMutex.Unlock()
	if fake.CreateUserStub != nil {
		return fake.CreateUserStub(username, password, origin)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.createUserReturns.result1, fake.createUserReturns.result2, fake.createUserReturns.result3
}

func (fake *FakeCreateUserActor) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *FakeCreateUserActor) CreateUserArgsForCall(i int) (string, string, string) {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return fake.createUserArgsForCall[i].username, fake.createUserArgsForCall[i].password, fake.createUserArgsForCall[i].origin
}

func (fake *FakeCreateUserActor) CreateUserReturns(result1 v2action.User, result2 v2action.Warnings, result3 error) {
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 v2action.User
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateUserActor) CreateUserReturnsOnCall(i int, result1 v2action.User, result2 v2action.Warnings, result3 error) {
	fake.CreateUserStub = nil
	if fake.createUserReturnsOnCall == nil {
		fake.createUserReturnsOnCall = make(map[int]struct {
			result1 v2action.User
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.createUserReturnsOnCall[i] = struct {
		result1 v2action.User
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreateUserActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCreateUserActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.CreateUserActor = new(FakeCreateUserActor)
