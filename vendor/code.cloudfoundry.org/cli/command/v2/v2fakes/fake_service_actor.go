// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeServiceActor struct {
	GetServiceInstanceByNameAndSpaceStub        func(name string, spaceGUID string) (v2action.ServiceInstance, v2action.Warnings, error)
	getServiceInstanceByNameAndSpaceMutex       sync.RWMutex
	getServiceInstanceByNameAndSpaceArgsForCall []struct {
		name      string
		spaceGUID string
	}
	getServiceInstanceByNameAndSpaceReturns struct {
		result1 v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}
	getServiceInstanceByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}
	GetServiceInstanceSummaryByNameAndSpaceStub        func(name string, spaceGUID string) (v2action.ServiceInstanceSummary, v2action.Warnings, error)
	getServiceInstanceSummaryByNameAndSpaceMutex       sync.RWMutex
	getServiceInstanceSummaryByNameAndSpaceArgsForCall []struct {
		name      string
		spaceGUID string
	}
	getServiceInstanceSummaryByNameAndSpaceReturns struct {
		result1 v2action.ServiceInstanceSummary
		result2 v2action.Warnings
		result3 error
	}
	getServiceInstanceSummaryByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v2action.ServiceInstanceSummary
		result2 v2action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceActor) GetServiceInstanceByNameAndSpace(name string, spaceGUID string) (v2action.ServiceInstance, v2action.Warnings, error) {
	fake.getServiceInstanceByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getServiceInstanceByNameAndSpaceReturnsOnCall[len(fake.getServiceInstanceByNameAndSpaceArgsForCall)]
	fake.getServiceInstanceByNameAndSpaceArgsForCall = append(fake.getServiceInstanceByNameAndSpaceArgsForCall, struct {
		name      string
		spaceGUID string
	}{name, spaceGUID})
	fake.recordInvocation("GetServiceInstanceByNameAndSpace", []interface{}{name, spaceGUID})
	fake.getServiceInstanceByNameAndSpaceMutex.Unlock()
	if fake.GetServiceInstanceByNameAndSpaceStub != nil {
		return fake.GetServiceInstanceByNameAndSpaceStub(name, spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getServiceInstanceByNameAndSpaceReturns.result1, fake.getServiceInstanceByNameAndSpaceReturns.result2, fake.getServiceInstanceByNameAndSpaceReturns.result3
}

func (fake *FakeServiceActor) GetServiceInstanceByNameAndSpaceCallCount() int {
	fake.getServiceInstanceByNameAndSpaceMutex.RLock()
	defer fake.getServiceInstanceByNameAndSpaceMutex.RUnlock()
	return len(fake.getServiceInstanceByNameAndSpaceArgsForCall)
}

func (fake *FakeServiceActor) GetServiceInstanceByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getServiceInstanceByNameAndSpaceMutex.RLock()
	defer fake.getServiceInstanceByNameAndSpaceMutex.RUnlock()
	return fake.getServiceInstanceByNameAndSpaceArgsForCall[i].name, fake.getServiceInstanceByNameAndSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeServiceActor) GetServiceInstanceByNameAndSpaceReturns(result1 v2action.ServiceInstance, result2 v2action.Warnings, result3 error) {
	fake.GetServiceInstanceByNameAndSpaceStub = nil
	fake.getServiceInstanceByNameAndSpaceReturns = struct {
		result1 v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServiceActor) GetServiceInstanceByNameAndSpaceReturnsOnCall(i int, result1 v2action.ServiceInstance, result2 v2action.Warnings, result3 error) {
	fake.GetServiceInstanceByNameAndSpaceStub = nil
	if fake.getServiceInstanceByNameAndSpaceReturnsOnCall == nil {
		fake.getServiceInstanceByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v2action.ServiceInstance
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getServiceInstanceByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v2action.ServiceInstance
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServiceActor) GetServiceInstanceSummaryByNameAndSpace(name string, spaceGUID string) (v2action.ServiceInstanceSummary, v2action.Warnings, error) {
	fake.getServiceInstanceSummaryByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getServiceInstanceSummaryByNameAndSpaceReturnsOnCall[len(fake.getServiceInstanceSummaryByNameAndSpaceArgsForCall)]
	fake.getServiceInstanceSummaryByNameAndSpaceArgsForCall = append(fake.getServiceInstanceSummaryByNameAndSpaceArgsForCall, struct {
		name      string
		spaceGUID string
	}{name, spaceGUID})
	fake.recordInvocation("GetServiceInstanceSummaryByNameAndSpace", []interface{}{name, spaceGUID})
	fake.getServiceInstanceSummaryByNameAndSpaceMutex.Unlock()
	if fake.GetServiceInstanceSummaryByNameAndSpaceStub != nil {
		return fake.GetServiceInstanceSummaryByNameAndSpaceStub(name, spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getServiceInstanceSummaryByNameAndSpaceReturns.result1, fake.getServiceInstanceSummaryByNameAndSpaceReturns.result2, fake.getServiceInstanceSummaryByNameAndSpaceReturns.result3
}

func (fake *FakeServiceActor) GetServiceInstanceSummaryByNameAndSpaceCallCount() int {
	fake.getServiceInstanceSummaryByNameAndSpaceMutex.RLock()
	defer fake.getServiceInstanceSummaryByNameAndSpaceMutex.RUnlock()
	return len(fake.getServiceInstanceSummaryByNameAndSpaceArgsForCall)
}

func (fake *FakeServiceActor) GetServiceInstanceSummaryByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getServiceInstanceSummaryByNameAndSpaceMutex.RLock()
	defer fake.getServiceInstanceSummaryByNameAndSpaceMutex.RUnlock()
	return fake.getServiceInstanceSummaryByNameAndSpaceArgsForCall[i].name, fake.getServiceInstanceSummaryByNameAndSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeServiceActor) GetServiceInstanceSummaryByNameAndSpaceReturns(result1 v2action.ServiceInstanceSummary, result2 v2action.Warnings, result3 error) {
	fake.GetServiceInstanceSummaryByNameAndSpaceStub = nil
	fake.getServiceInstanceSummaryByNameAndSpaceReturns = struct {
		result1 v2action.ServiceInstanceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServiceActor) GetServiceInstanceSummaryByNameAndSpaceReturnsOnCall(i int, result1 v2action.ServiceInstanceSummary, result2 v2action.Warnings, result3 error) {
	fake.GetServiceInstanceSummaryByNameAndSpaceStub = nil
	if fake.getServiceInstanceSummaryByNameAndSpaceReturnsOnCall == nil {
		fake.getServiceInstanceSummaryByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v2action.ServiceInstanceSummary
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getServiceInstanceSummaryByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v2action.ServiceInstanceSummary
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeServiceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getServiceInstanceByNameAndSpaceMutex.RLock()
	defer fake.getServiceInstanceByNameAndSpaceMutex.RUnlock()
	fake.getServiceInstanceSummaryByNameAndSpaceMutex.RLock()
	defer fake.getServiceInstanceSummaryByNameAndSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.ServiceActor = new(FakeServiceActor)
