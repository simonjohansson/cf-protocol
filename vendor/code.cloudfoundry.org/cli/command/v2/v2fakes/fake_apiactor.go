// Code generated by counterfeiter. DO NOT EDIT.
package v2fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v2action"
	"code.cloudfoundry.org/cli/command/v2"
)

type FakeAPIActor struct {
	ClearTargetStub        func(config v2action.Config)
	clearTargetMutex       sync.RWMutex
	clearTargetArgsForCall []struct {
		config v2action.Config
	}
	SetTargetStub        func(config v2action.Config, settings v2action.TargetSettings) (v2action.Warnings, error)
	setTargetMutex       sync.RWMutex
	setTargetArgsForCall []struct {
		config   v2action.Config
		settings v2action.TargetSettings
	}
	setTargetReturns struct {
		result1 v2action.Warnings
		result2 error
	}
	setTargetReturnsOnCall map[int]struct {
		result1 v2action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPIActor) ClearTarget(config v2action.Config) {
	fake.clearTargetMutex.Lock()
	fake.clearTargetArgsForCall = append(fake.clearTargetArgsForCall, struct {
		config v2action.Config
	}{config})
	fake.recordInvocation("ClearTarget", []interface{}{config})
	fake.clearTargetMutex.Unlock()
	if fake.ClearTargetStub != nil {
		fake.ClearTargetStub(config)
	}
}

func (fake *FakeAPIActor) ClearTargetCallCount() int {
	fake.clearTargetMutex.RLock()
	defer fake.clearTargetMutex.RUnlock()
	return len(fake.clearTargetArgsForCall)
}

func (fake *FakeAPIActor) ClearTargetArgsForCall(i int) v2action.Config {
	fake.clearTargetMutex.RLock()
	defer fake.clearTargetMutex.RUnlock()
	return fake.clearTargetArgsForCall[i].config
}

func (fake *FakeAPIActor) SetTarget(config v2action.Config, settings v2action.TargetSettings) (v2action.Warnings, error) {
	fake.setTargetMutex.Lock()
	ret, specificReturn := fake.setTargetReturnsOnCall[len(fake.setTargetArgsForCall)]
	fake.setTargetArgsForCall = append(fake.setTargetArgsForCall, struct {
		config   v2action.Config
		settings v2action.TargetSettings
	}{config, settings})
	fake.recordInvocation("SetTarget", []interface{}{config, settings})
	fake.setTargetMutex.Unlock()
	if fake.SetTargetStub != nil {
		return fake.SetTargetStub(config, settings)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.setTargetReturns.result1, fake.setTargetReturns.result2
}

func (fake *FakeAPIActor) SetTargetCallCount() int {
	fake.setTargetMutex.RLock()
	defer fake.setTargetMutex.RUnlock()
	return len(fake.setTargetArgsForCall)
}

func (fake *FakeAPIActor) SetTargetArgsForCall(i int) (v2action.Config, v2action.TargetSettings) {
	fake.setTargetMutex.RLock()
	defer fake.setTargetMutex.RUnlock()
	return fake.setTargetArgsForCall[i].config, fake.setTargetArgsForCall[i].settings
}

func (fake *FakeAPIActor) SetTargetReturns(result1 v2action.Warnings, result2 error) {
	fake.SetTargetStub = nil
	fake.setTargetReturns = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIActor) SetTargetReturnsOnCall(i int, result1 v2action.Warnings, result2 error) {
	fake.SetTargetStub = nil
	if fake.setTargetReturnsOnCall == nil {
		fake.setTargetReturnsOnCall = make(map[int]struct {
			result1 v2action.Warnings
			result2 error
		})
	}
	fake.setTargetReturnsOnCall[i] = struct {
		result1 v2action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeAPIActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clearTargetMutex.RLock()
	defer fake.clearTargetMutex.RUnlock()
	fake.setTargetMutex.RLock()
	defer fake.setTargetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPIActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v2.APIActor = new(FakeAPIActor)
