// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeV3SetEnvActor struct {
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct{}
	cloudControllerAPIVersionReturns     struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	SetEnvironmentVariableByApplicationNameAndSpaceStub        func(appName string, spaceGUID string, envPair v3action.EnvironmentVariablePair) (v3action.Warnings, error)
	setEnvironmentVariableByApplicationNameAndSpaceMutex       sync.RWMutex
	setEnvironmentVariableByApplicationNameAndSpaceArgsForCall []struct {
		appName   string
		spaceGUID string
		envPair   v3action.EnvironmentVariablePair
	}
	setEnvironmentVariableByApplicationNameAndSpaceReturns struct {
		result1 v3action.Warnings
		result2 error
	}
	setEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV3SetEnvActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct{}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cloudControllerAPIVersionReturns.result1
}

func (fake *FakeV3SetEnvActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeV3SetEnvActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeV3SetEnvActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeV3SetEnvActor) SetEnvironmentVariableByApplicationNameAndSpace(appName string, spaceGUID string, envPair v3action.EnvironmentVariablePair) (v3action.Warnings, error) {
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.setEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall[len(fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall)]
	fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall = append(fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall, struct {
		appName   string
		spaceGUID string
		envPair   v3action.EnvironmentVariablePair
	}{appName, spaceGUID, envPair})
	fake.recordInvocation("SetEnvironmentVariableByApplicationNameAndSpace", []interface{}{appName, spaceGUID, envPair})
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.Unlock()
	if fake.SetEnvironmentVariableByApplicationNameAndSpaceStub != nil {
		return fake.SetEnvironmentVariableByApplicationNameAndSpaceStub(appName, spaceGUID, envPair)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.setEnvironmentVariableByApplicationNameAndSpaceReturns.result1, fake.setEnvironmentVariableByApplicationNameAndSpaceReturns.result2
}

func (fake *FakeV3SetEnvActor) SetEnvironmentVariableByApplicationNameAndSpaceCallCount() int {
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RLock()
	defer fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RUnlock()
	return len(fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall)
}

func (fake *FakeV3SetEnvActor) SetEnvironmentVariableByApplicationNameAndSpaceArgsForCall(i int) (string, string, v3action.EnvironmentVariablePair) {
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RLock()
	defer fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RUnlock()
	return fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall[i].appName, fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall[i].spaceGUID, fake.setEnvironmentVariableByApplicationNameAndSpaceArgsForCall[i].envPair
}

func (fake *FakeV3SetEnvActor) SetEnvironmentVariableByApplicationNameAndSpaceReturns(result1 v3action.Warnings, result2 error) {
	fake.SetEnvironmentVariableByApplicationNameAndSpaceStub = nil
	fake.setEnvironmentVariableByApplicationNameAndSpaceReturns = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV3SetEnvActor) SetEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall(i int, result1 v3action.Warnings, result2 error) {
	fake.SetEnvironmentVariableByApplicationNameAndSpaceStub = nil
	if fake.setEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall == nil {
		fake.setEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Warnings
			result2 error
		})
	}
	fake.setEnvironmentVariableByApplicationNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeV3SetEnvActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RLock()
	defer fake.setEnvironmentVariableByApplicationNameAndSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV3SetEnvActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.V3SetEnvActor = new(FakeV3SetEnvActor)
