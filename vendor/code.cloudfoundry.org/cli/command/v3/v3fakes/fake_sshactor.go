// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/sharedaction"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeSSHActor struct {
	ExecuteSecureShellStub        func(sshClient sharedaction.SecureShellClient, sshOptions sharedaction.SSHOptions) error
	executeSecureShellMutex       sync.RWMutex
	executeSecureShellArgsForCall []struct {
		sshClient  sharedaction.SecureShellClient
		sshOptions sharedaction.SSHOptions
	}
	executeSecureShellReturns struct {
		result1 error
	}
	executeSecureShellReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSSHActor) ExecuteSecureShell(sshClient sharedaction.SecureShellClient, sshOptions sharedaction.SSHOptions) error {
	fake.executeSecureShellMutex.Lock()
	ret, specificReturn := fake.executeSecureShellReturnsOnCall[len(fake.executeSecureShellArgsForCall)]
	fake.executeSecureShellArgsForCall = append(fake.executeSecureShellArgsForCall, struct {
		sshClient  sharedaction.SecureShellClient
		sshOptions sharedaction.SSHOptions
	}{sshClient, sshOptions})
	fake.recordInvocation("ExecuteSecureShell", []interface{}{sshClient, sshOptions})
	fake.executeSecureShellMutex.Unlock()
	if fake.ExecuteSecureShellStub != nil {
		return fake.ExecuteSecureShellStub(sshClient, sshOptions)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.executeSecureShellReturns.result1
}

func (fake *FakeSSHActor) ExecuteSecureShellCallCount() int {
	fake.executeSecureShellMutex.RLock()
	defer fake.executeSecureShellMutex.RUnlock()
	return len(fake.executeSecureShellArgsForCall)
}

func (fake *FakeSSHActor) ExecuteSecureShellArgsForCall(i int) (sharedaction.SecureShellClient, sharedaction.SSHOptions) {
	fake.executeSecureShellMutex.RLock()
	defer fake.executeSecureShellMutex.RUnlock()
	return fake.executeSecureShellArgsForCall[i].sshClient, fake.executeSecureShellArgsForCall[i].sshOptions
}

func (fake *FakeSSHActor) ExecuteSecureShellReturns(result1 error) {
	fake.ExecuteSecureShellStub = nil
	fake.executeSecureShellReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSHActor) ExecuteSecureShellReturnsOnCall(i int, result1 error) {
	fake.ExecuteSecureShellStub = nil
	if fake.executeSecureShellReturnsOnCall == nil {
		fake.executeSecureShellReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.executeSecureShellReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSSHActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeSecureShellMutex.RLock()
	defer fake.executeSecureShellMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSSHActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.SSHActor = new(FakeSSHActor)
