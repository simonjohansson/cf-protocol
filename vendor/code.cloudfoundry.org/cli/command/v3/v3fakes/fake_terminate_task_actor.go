// Code generated by counterfeiter. DO NOT EDIT.
package v3fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v3action"
	"code.cloudfoundry.org/cli/command/v3"
)

type FakeTerminateTaskActor struct {
	GetApplicationByNameAndSpaceStub        func(appName string, spaceGUID string) (v3action.Application, v3action.Warnings, error)
	getApplicationByNameAndSpaceMutex       sync.RWMutex
	getApplicationByNameAndSpaceArgsForCall []struct {
		appName   string
		spaceGUID string
	}
	getApplicationByNameAndSpaceReturns struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	getApplicationByNameAndSpaceReturnsOnCall map[int]struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}
	GetTaskBySequenceIDAndApplicationStub        func(sequenceID int, appGUID string) (v3action.Task, v3action.Warnings, error)
	getTaskBySequenceIDAndApplicationMutex       sync.RWMutex
	getTaskBySequenceIDAndApplicationArgsForCall []struct {
		sequenceID int
		appGUID    string
	}
	getTaskBySequenceIDAndApplicationReturns struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}
	getTaskBySequenceIDAndApplicationReturnsOnCall map[int]struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}
	TerminateTaskStub        func(taskGUID string) (v3action.Task, v3action.Warnings, error)
	terminateTaskMutex       sync.RWMutex
	terminateTaskArgsForCall []struct {
		taskGUID string
	}
	terminateTaskReturns struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}
	terminateTaskReturnsOnCall map[int]struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}
	CloudControllerAPIVersionStub        func() string
	cloudControllerAPIVersionMutex       sync.RWMutex
	cloudControllerAPIVersionArgsForCall []struct{}
	cloudControllerAPIVersionReturns     struct {
		result1 string
	}
	cloudControllerAPIVersionReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTerminateTaskActor) GetApplicationByNameAndSpace(appName string, spaceGUID string) (v3action.Application, v3action.Warnings, error) {
	fake.getApplicationByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getApplicationByNameAndSpaceReturnsOnCall[len(fake.getApplicationByNameAndSpaceArgsForCall)]
	fake.getApplicationByNameAndSpaceArgsForCall = append(fake.getApplicationByNameAndSpaceArgsForCall, struct {
		appName   string
		spaceGUID string
	}{appName, spaceGUID})
	fake.recordInvocation("GetApplicationByNameAndSpace", []interface{}{appName, spaceGUID})
	fake.getApplicationByNameAndSpaceMutex.Unlock()
	if fake.GetApplicationByNameAndSpaceStub != nil {
		return fake.GetApplicationByNameAndSpaceStub(appName, spaceGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getApplicationByNameAndSpaceReturns.result1, fake.getApplicationByNameAndSpaceReturns.result2, fake.getApplicationByNameAndSpaceReturns.result3
}

func (fake *FakeTerminateTaskActor) GetApplicationByNameAndSpaceCallCount() int {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	return len(fake.getApplicationByNameAndSpaceArgsForCall)
}

func (fake *FakeTerminateTaskActor) GetApplicationByNameAndSpaceArgsForCall(i int) (string, string) {
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	return fake.getApplicationByNameAndSpaceArgsForCall[i].appName, fake.getApplicationByNameAndSpaceArgsForCall[i].spaceGUID
}

func (fake *FakeTerminateTaskActor) GetApplicationByNameAndSpaceReturns(result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.GetApplicationByNameAndSpaceStub = nil
	fake.getApplicationByNameAndSpaceReturns = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) GetApplicationByNameAndSpaceReturnsOnCall(i int, result1 v3action.Application, result2 v3action.Warnings, result3 error) {
	fake.GetApplicationByNameAndSpaceStub = nil
	if fake.getApplicationByNameAndSpaceReturnsOnCall == nil {
		fake.getApplicationByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v3action.Application
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getApplicationByNameAndSpaceReturnsOnCall[i] = struct {
		result1 v3action.Application
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) GetTaskBySequenceIDAndApplication(sequenceID int, appGUID string) (v3action.Task, v3action.Warnings, error) {
	fake.getTaskBySequenceIDAndApplicationMutex.Lock()
	ret, specificReturn := fake.getTaskBySequenceIDAndApplicationReturnsOnCall[len(fake.getTaskBySequenceIDAndApplicationArgsForCall)]
	fake.getTaskBySequenceIDAndApplicationArgsForCall = append(fake.getTaskBySequenceIDAndApplicationArgsForCall, struct {
		sequenceID int
		appGUID    string
	}{sequenceID, appGUID})
	fake.recordInvocation("GetTaskBySequenceIDAndApplication", []interface{}{sequenceID, appGUID})
	fake.getTaskBySequenceIDAndApplicationMutex.Unlock()
	if fake.GetTaskBySequenceIDAndApplicationStub != nil {
		return fake.GetTaskBySequenceIDAndApplicationStub(sequenceID, appGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.getTaskBySequenceIDAndApplicationReturns.result1, fake.getTaskBySequenceIDAndApplicationReturns.result2, fake.getTaskBySequenceIDAndApplicationReturns.result3
}

func (fake *FakeTerminateTaskActor) GetTaskBySequenceIDAndApplicationCallCount() int {
	fake.getTaskBySequenceIDAndApplicationMutex.RLock()
	defer fake.getTaskBySequenceIDAndApplicationMutex.RUnlock()
	return len(fake.getTaskBySequenceIDAndApplicationArgsForCall)
}

func (fake *FakeTerminateTaskActor) GetTaskBySequenceIDAndApplicationArgsForCall(i int) (int, string) {
	fake.getTaskBySequenceIDAndApplicationMutex.RLock()
	defer fake.getTaskBySequenceIDAndApplicationMutex.RUnlock()
	return fake.getTaskBySequenceIDAndApplicationArgsForCall[i].sequenceID, fake.getTaskBySequenceIDAndApplicationArgsForCall[i].appGUID
}

func (fake *FakeTerminateTaskActor) GetTaskBySequenceIDAndApplicationReturns(result1 v3action.Task, result2 v3action.Warnings, result3 error) {
	fake.GetTaskBySequenceIDAndApplicationStub = nil
	fake.getTaskBySequenceIDAndApplicationReturns = struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) GetTaskBySequenceIDAndApplicationReturnsOnCall(i int, result1 v3action.Task, result2 v3action.Warnings, result3 error) {
	fake.GetTaskBySequenceIDAndApplicationStub = nil
	if fake.getTaskBySequenceIDAndApplicationReturnsOnCall == nil {
		fake.getTaskBySequenceIDAndApplicationReturnsOnCall = make(map[int]struct {
			result1 v3action.Task
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.getTaskBySequenceIDAndApplicationReturnsOnCall[i] = struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) TerminateTask(taskGUID string) (v3action.Task, v3action.Warnings, error) {
	fake.terminateTaskMutex.Lock()
	ret, specificReturn := fake.terminateTaskReturnsOnCall[len(fake.terminateTaskArgsForCall)]
	fake.terminateTaskArgsForCall = append(fake.terminateTaskArgsForCall, struct {
		taskGUID string
	}{taskGUID})
	fake.recordInvocation("TerminateTask", []interface{}{taskGUID})
	fake.terminateTaskMutex.Unlock()
	if fake.TerminateTaskStub != nil {
		return fake.TerminateTaskStub(taskGUID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.terminateTaskReturns.result1, fake.terminateTaskReturns.result2, fake.terminateTaskReturns.result3
}

func (fake *FakeTerminateTaskActor) TerminateTaskCallCount() int {
	fake.terminateTaskMutex.RLock()
	defer fake.terminateTaskMutex.RUnlock()
	return len(fake.terminateTaskArgsForCall)
}

func (fake *FakeTerminateTaskActor) TerminateTaskArgsForCall(i int) string {
	fake.terminateTaskMutex.RLock()
	defer fake.terminateTaskMutex.RUnlock()
	return fake.terminateTaskArgsForCall[i].taskGUID
}

func (fake *FakeTerminateTaskActor) TerminateTaskReturns(result1 v3action.Task, result2 v3action.Warnings, result3 error) {
	fake.TerminateTaskStub = nil
	fake.terminateTaskReturns = struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) TerminateTaskReturnsOnCall(i int, result1 v3action.Task, result2 v3action.Warnings, result3 error) {
	fake.TerminateTaskStub = nil
	if fake.terminateTaskReturnsOnCall == nil {
		fake.terminateTaskReturnsOnCall = make(map[int]struct {
			result1 v3action.Task
			result2 v3action.Warnings
			result3 error
		})
	}
	fake.terminateTaskReturnsOnCall[i] = struct {
		result1 v3action.Task
		result2 v3action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTerminateTaskActor) CloudControllerAPIVersion() string {
	fake.cloudControllerAPIVersionMutex.Lock()
	ret, specificReturn := fake.cloudControllerAPIVersionReturnsOnCall[len(fake.cloudControllerAPIVersionArgsForCall)]
	fake.cloudControllerAPIVersionArgsForCall = append(fake.cloudControllerAPIVersionArgsForCall, struct{}{})
	fake.recordInvocation("CloudControllerAPIVersion", []interface{}{})
	fake.cloudControllerAPIVersionMutex.Unlock()
	if fake.CloudControllerAPIVersionStub != nil {
		return fake.CloudControllerAPIVersionStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cloudControllerAPIVersionReturns.result1
}

func (fake *FakeTerminateTaskActor) CloudControllerAPIVersionCallCount() int {
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	return len(fake.cloudControllerAPIVersionArgsForCall)
}

func (fake *FakeTerminateTaskActor) CloudControllerAPIVersionReturns(result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	fake.cloudControllerAPIVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTerminateTaskActor) CloudControllerAPIVersionReturnsOnCall(i int, result1 string) {
	fake.CloudControllerAPIVersionStub = nil
	if fake.cloudControllerAPIVersionReturnsOnCall == nil {
		fake.cloudControllerAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cloudControllerAPIVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTerminateTaskActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getApplicationByNameAndSpaceMutex.RLock()
	defer fake.getApplicationByNameAndSpaceMutex.RUnlock()
	fake.getTaskBySequenceIDAndApplicationMutex.RLock()
	defer fake.getTaskBySequenceIDAndApplicationMutex.RUnlock()
	fake.terminateTaskMutex.RLock()
	defer fake.terminateTaskMutex.RUnlock()
	fake.cloudControllerAPIVersionMutex.RLock()
	defer fake.cloudControllerAPIVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTerminateTaskActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v3.TerminateTaskActor = new(FakeTerminateTaskActor)
